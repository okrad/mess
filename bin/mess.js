/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[15,38,41,44,57,72],$V1=[2,46],$V2=[1,3],$V3=[15,38,41,44,57],$V4=[1,9],$V5=[1,15],$V6=[1,16],$V7=[1,18],$V8=[1,19],$V9=[44,56,57,62,64,65,66,67,69,70,72],$Va=[9,21,38,41,44,57,72],$Vb=[1,26],$Vc=[1,27],$Vd=[9,21,38,41,44,50,51,57,72],$Ve=[1,37],$Vf=[1,38],$Vg=[1,48],$Vh=[1,60],$Vi=[1,53],$Vj=[1,54],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,61],$Vp=[1,63],$Vq=[1,64],$Vr=[11,15,19,38,41,44,57],$Vs=[18,63],$Vt=[44,56,57,62,64,65,66,67,69,70],$Vu=[2,26],$Vv=[1,83],$Vw=[1,81],$Vx=[1,82],$Vy=[1,84],$Vz=[18,21,63,72],$VA=[18,21,44,51,56,57,59,60,61,62,63,64,65,66,67,69,70,72],$VB=[9,21],$VC=[18,21,44,51,56,57,61,62,63,64,65,66,67,69,70,72];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"stylesheet_repetition0":4,"stylesheet_repetition1":5,"rule":6,"EOF":7,"selectorlist":8,"LBRACE":9,"rule_repetition_plus0":10,"RBRACE":11,"rulecontent":12,"vardecl":13,"property":14,"ASSIGNMENT":15,"vardecl_repetition0":16,"expr":17,"SEMICOLON":18,"PROPNAME":19,"selector":20,"COMMA":21,"class":22,"selector_option0":23,"selector_repetition0":24,"selector_option1":25,"hash":26,"selector_option2":27,"selector_repetition1":28,"selector_option3":29,"tag":30,"selector_option4":31,"selector_repetition2":32,"selector_option5":33,"selvar":34,"selector_option6":35,"selector_repetition3":36,"selector_option7":37,"DOT":38,"ident":39,"class_option0":40,"HASH":41,"hash_option0":42,"tag_option0":43,"DOLLARKEYWORD":44,"selvar_option0":45,"pseudo":46,"PSEUDO_BEFORE":47,"PSEUDO_AFTER":48,"combinator":49,"GREATER":50,"PLUS":51,"term":52,"expr_repetition_plus0":53,"math_expr":54,"expr_option0":55,"STRING":56,"IDENT":57,"math_term":58,"MUL":59,"SLASH":60,"MINUS":61,"LPAR":62,"RPAR":63,"PERCENTAGE":64,"DIMENSION":65,"NUMBER":66,"VAR_REFERENCE":67,"function":68,"COLOR":69,"FUNCTION":70,"function_option0":71,"S":72,"expr_option0_repetition_plus0":73,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",9:"LBRACE",11:"RBRACE",15:"ASSIGNMENT",18:"SEMICOLON",19:"PROPNAME",21:"COMMA",38:"DOT",41:"HASH",44:"DOLLARKEYWORD",47:"PSEUDO_BEFORE",48:"PSEUDO_AFTER",50:"GREATER",51:"PLUS",56:"STRING",57:"IDENT",59:"MUL",60:"SLASH",61:"MINUS",62:"LPAR",63:"RPAR",64:"PERCENTAGE",65:"DIMENSION",66:"NUMBER",67:"VAR_REFERENCE",69:"COLOR",70:"FUNCTION",72:"S"},
productions_: [0,[3,4],[3,1],[6,4],[12,1],[12,1],[12,1],[13,4],[14,3],[8,1],[8,3],[20,4],[20,4],[20,4],[20,4],[22,3],[26,2],[30,2],[34,2],[46,1],[46,1],[49,1],[49,1],[17,1],[17,3],[17,3],[17,1],[17,3],[17,3],[52,1],[52,1],[54,1],[54,3],[54,3],[54,3],[54,3],[54,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[68,3],[39,1],[4,0],[4,2],[5,0],[5,2],[10,1],[10,2],[16,0],[16,2],[23,0],[23,1],[24,0],[24,2],[25,0],[25,1],[27,0],[27,1],[28,0],[28,2],[29,0],[29,1],[31,0],[31,1],[32,0],[32,2],[33,0],[33,1],[35,0],[35,1],[36,0],[36,2],[37,0],[37,1],[40,0],[40,1],[42,0],[42,1],[43,0],[43,1],[45,0],[45,1],[53,1],[53,2],[73,1],[73,2],[55,0],[55,1],[71,0],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:


		var styles = [];

		if($$[$0-2]) {
			styles.push({
				vars: $$[$0-2]
			});
		}

		if($$[$0-1]) {
			styles.push({
				rule: $$[$0-1]
			});
		}

		if($$[$0] && Array.isArray($$[$0])) {
			styles = styles.concat($$[$0]);
		}

		yy.setAST(styles);

	
break;
case 3:


		if(!Array.isArray($$[$0-1]))
			$$[$0-1] = [$$[$0-1]];

		this.$ = {
			type: 'rule',
			selectors: $$[$0-3],
			content: $$[$0-1]
		};
	
break;
case 7:


		var varName = $$[$0-3].substr(1),
			colonPos = varName.indexOf(':');

		if(colonPos != -1) {
			varName = varName.substr(0, colonPos);
			varName = varName.replace(/\s/, '');
		}

		this.$ = {
			type: 'vardecl',
			name: varName,
			val: $$[$0-1]
		};

	
break;
case 8:

		this.$ = {
			type: 'property',
			name: $$[$0-2].substr(0, $$[$0-2].indexOf(' ') - 1),
			val: $$[$0-1]
		}
	
break;
case 9:

		this.$ = [$$[$0]];
	
break;
case 10:

		this.$ = [$$[$0-2]];
		if($$[$0])
			this.$ = this.$.concat($$[$0]);

	
break;
case 11: case 12: case 13: case 14:

		this.$ = $$[$0-3];
		this.$.combinator = $$[$0-2] !== undefined ? $$[$0-2] : $$[$0-1].length > 0 ? 'descendant' : 'specificity';
		this.$.relatedSelector = $$[$0];
	
break;
case 15:

		this.$ = {
			type: 'class',
			name: $$[$0-1].trim(),
			pseudo: $$[$0]
		};
	
break;
case 16:

		this.$ = {
			type: 'id',
			name: $$[$0-1].substr(1).trim(),
			pseudo: $$[$0]
		};
	
break;
case 17:

		this.$ = {
			type: 'tag',
			name: $$[$0-1].trim(),
			pseudo: $$[$0]
		};
	
break;
case 18:

		this.$ = {
			type: 'var_reference',
			val: $$[$0-1].substr(1),
			pseudo: $$[$0]
		};
	
break;
case 19: case 20:

		this.$ = $$[$0];
	
break;
case 21:

		this.$ = 'child';
	
break;
case 22:

		this.$ = 'next_sibling';
	
break;
case 24: case 27:


		this.$ = {
			type: 'term_sequence',
			val: [$$[$0-2], $$[$0]]
		};

	
break;
case 25:


		this.$ = {
			type: 'term_list',
			val: [$$[$0-2]]
		};

		if($$[$0].type && $$[$0].type == 'term_list') {
			this.$.val = this.$.val.concat($$[$0].val);
		}
		else {
			this.$.val.push($$[$0]);
		}


	
break;
case 28:


		this.$ = {
			type: 'term_list',
			val: [$$[$0-2]]
		};

		if($$[$0].type && $$[$0].type == 'term_list') {
			this.$.val = this.$.val.concat($$[$0].val);
		}
		else {
			this.$.val.push($$[$0]);
		}

/*
		this.$ = {
			type: 'term_list',
			val: [$$[$0-2], $$[$0]]
		};
*/

	
break;
case 29:


		//Una stringa potrebbe contenere riferimenti a delle variabili, quindi la devo splittare

		this.$ = {
			type: 'string',
			val: []
		};

		var lastIndex = 0,
			content = $$[$0].slice(1, -1),
			re = /\{\$[^}]+\}/,
			matches;

		while(matches = content.match(re)) {

			if(matches.index > lastIndex) {
				this.$.val.push({
					type: 'string_part',
					val: content.substr(lastIndex, matches.index - lastIndex)
				});
				lastIndex = matches.index;
			}

			this.$.val.push({
				type: 'var_reference',
				val: matches[0].slice(2, -1)
			});

			content = content.substr(matches.index + matches[0].length);
		};

		if(content.length > 0) {
			this.$.val.push({
				type: 'string_part',
				val: content
			});
		}

	
break;
case 30:

		this.$ = {
			type: 'keyword',
			val: $$[$0]
		};
	
break;
case 31:

	
break;
case 32:

		this.$ = {
			type: 'math_expr',
			operand1: $$[$0-2],
			operand2: $$[$0],
			operator: 'mul'
		};
	
break;
case 33:

		this.$ = {
			type: 'math_expr',
			operand1: $$[$0-2],
			operand2: $$[$0],
			operator: 'div'
		};
	
break;
case 34:

		this.$ = {
			type: 'math_expr',
			operand1: $$[$0-2],
			operand2: $$[$0],
			operator: 'sum'
		};
	
break;
case 35:

		this.$ = {
			type: 'math_expr',
			operand1: $$[$0-2],
			operand2: $$[$0],
			operator: 'diff'
		};
	
break;
case 36:

		this.$ = $$[$0-1];
	
break;
case 37:

		this.$ = {
			type: 'percentage',
			val: parseFloat($$[$0]),
			um: '%',
			text: $$[$0]
		};
	
break;
case 38:


		var val = parseFloat($$[$0]),
			um = $$[$0].substr((val + "").length);

		this.$ = {
			type: 'dimension',
			val: val,
			um: um,
			text: $$[$0]
		};
	
break;
case 39:

		this.$ = {
			type: 'number',
			val: parseFloat($$[$0]),
			text: $$[$0]
		};
	
break;
case 40:

		this.$ = {
			type: 'var_reference',
			val: $$[$0].substr(1)
		};
	
break;
case 41:

		this.$ = {
			type: 'var_reference',
			val: $$[$0].slice(2, -1)
		};
	
break;
case 43:

		this.$ = {
			type: 'color',
			val: $$[$0]
		};
	
break;
case 44:

		this.$ = {
		  type: 'function',
		  name: $$[$0-2].slice(0, -1),
		  params: $$[$0-1]
		};
	
break;
case 46: case 48: case 52: case 56: case 62: case 68: case 74:
this.$ = [];
break;
case 47: case 49: case 51: case 53: case 57: case 63: case 69: case 75: case 87: case 89:
$$[$0-1].push($$[$0]);
break;
case 50: case 86: case 88:
this.$ = [$$[$0]];
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:$V2}),{1:[3]},o($V3,[2,48],{5:4,72:[1,5]}),{1:[2,2]},{6:6,8:8,13:7,15:$V4,20:10,22:11,26:12,30:13,34:14,38:$V5,39:17,41:$V6,44:$V7,57:$V8},o($V0,[2,47]),o($V0,$V1,{4:2,3:20,7:$V2}),o($V3,[2,49]),{9:[1,21]},o($V9,[2,52],{16:22}),{9:[2,9],21:[1,23]},o($Va,[2,54],{23:24,49:25,50:$Vb,51:$Vc}),o($Va,[2,60],{27:28,49:29,50:$Vb,51:$Vc}),o($Va,[2,66],{31:30,49:31,50:$Vb,51:$Vc}),o($Va,[2,72],{35:32,49:33,50:$Vb,51:$Vc}),{39:34,57:$V8},o($Vd,[2,80],{42:35,46:36,47:$Ve,48:$Vf}),o($Vd,[2,82],{43:39,46:40,47:$Ve,48:$Vf}),o($Vd,[2,84],{45:41,46:42,47:$Ve,48:$Vf}),o([9,21,38,41,44,47,48,50,51,57,72],[2,45]),{1:[2,1]},{6:47,8:8,10:43,12:44,13:45,14:46,15:$V4,19:$Vg,20:10,22:11,26:12,30:13,34:14,38:$V5,39:17,41:$V6,44:$V7,57:$V8},{17:49,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq,72:[1,50]},{8:65,20:10,22:11,26:12,30:13,34:14,38:$V5,39:17,41:$V6,44:$V7,57:$V8},o($Va,[2,56],{24:66}),o($Va,[2,55]),o($Va,[2,21]),o($Va,[2,22]),o($Va,[2,62],{28:67}),o($Va,[2,61]),o($Va,[2,68],{32:68}),o($Va,[2,67]),o($Va,[2,74],{36:69}),o($Va,[2,73]),o($Vd,[2,78],{40:70,46:71,47:$Ve,48:$Vf}),o($Vd,[2,16]),o($Vd,[2,81]),o($Vd,[2,19]),o($Vd,[2,20]),o($Vd,[2,17]),o($Vd,[2,83]),o($Vd,[2,18]),o($Vd,[2,85]),{6:47,8:8,11:[1,72],12:73,13:45,14:46,15:$V4,19:$Vg,20:10,22:11,26:12,30:13,34:14,38:$V5,39:17,41:$V6,44:$V7,57:$V8},o($Vr,[2,50]),o($Vr,[2,4]),o($Vr,[2,5]),o($Vr,[2,6]),{17:74,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{18:[1,75]},o($V9,[2,53]),o($Vs,[2,23],{53:76,21:[1,77],72:[1,78]}),o($Vt,[2,90],{55:79,73:85,18:$Vu,63:$Vu,21:[1,80],51:$Vv,59:$Vw,60:$Vx,61:$Vy,72:[1,86]}),o($Vz,[2,29]),o($Vz,[2,30]),o($VA,[2,31]),{44:$Vh,54:87,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},o($VA,[2,37]),o($VA,[2,38]),o($VA,[2,39]),o($VA,[2,40]),o($VA,[2,41]),o($VA,[2,42]),o($VA,[2,43]),{17:89,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,63:[2,92],64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq,71:88},{9:[2,10]},o($VB,[2,58],{22:11,26:12,30:13,34:14,39:17,25:90,20:92,38:$V5,41:$V6,44:$V7,57:$V8,72:[1,91]}),o($VB,[2,64],{22:11,26:12,30:13,34:14,39:17,29:93,20:95,38:$V5,41:$V6,44:$V7,57:$V8,72:[1,94]}),o($VB,[2,70],{22:11,26:12,30:13,34:14,39:17,33:96,20:98,38:$V5,41:$V6,44:$V7,57:$V8,72:[1,97]}),o($VB,[2,76],{22:11,26:12,30:13,34:14,39:17,37:99,20:101,38:$V5,41:$V6,44:$V7,57:$V8,72:[1,100]}),o($Vd,[2,15]),o($Vd,[2,79]),o([7,11,15,19,38,41,44,57,72],[2,3]),o($Vr,[2,51]),{18:[1,102]},o($Vr,[2,7]),{17:103,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq,72:[1,104]},{17:105,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},o($V9,[2,86]),{17:106,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{17:107,44:$Vh,52:51,54:52,56:$Vi,57:$Vj,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{44:$Vh,54:108,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{44:$Vh,54:109,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{44:$Vh,54:110,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},{44:$Vh,54:111,58:55,62:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:62,69:$Vp,70:$Vq},o($Vt,[2,91],{72:[1,112]}),o($V9,[2,88]),{51:$Vv,59:$Vw,60:$Vx,61:$Vy,63:[1,113]},{63:[1,114]},{63:[2,93]},o($VB,[2,11]),o($Va,[2,57]),o($VB,[2,59]),o($VB,[2,12]),o($Va,[2,63]),o($VB,[2,65]),o($VB,[2,13]),o($Va,[2,69]),o($VB,[2,71]),o($VB,[2,14]),o($Va,[2,75]),o($VB,[2,77]),o($Vr,[2,8]),o($Vs,[2,24]),o($V9,[2,87]),o($Vs,[2,25]),o($Vs,[2,27]),o($Vs,[2,28]),o($VA,[2,32]),o($VA,[2,33]),o($VC,[2,34],{59:$Vw,60:$Vx}),o($VC,[2,35],{59:$Vw,60:$Vx}),o($V9,[2,89]),o($VA,[2,36]),o($VA,[2,44])],
defaultActions: {3:[2,2],20:[2,1],65:[2,10],89:[2,93]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:/* ignore comments */
break;
case 2:return 56;
break;
case 3:return 'BAD_STRING';
break;
case 4:return 70;
break;
case 5:return 19;
break;
case 6:return 57;
break;
case 7:return 15;
break;
case 8:return 44;
break;
case 9:return 'ATKEYWORD';
break;
case 10:return 67;
break;
case 11:return 69;
break;
case 12:return 41;
break;
case 13:return 64;
break;
case 14:return 65;
break;
case 15:return 66;
break;
case 16:return 'UNICODE-RANGE';
break;
case 17:return 38;
break;
case 18:return 'COLON';
break;
case 19:return 18;
break;
case 20:return 9;
break;
case 21:return 11;
break;
case 22:return 62;
break;
case 23:return 63;
break;
case 24:return 'LSQUARE';
break;
case 25:return 'RSQUARE';
break;
case 26:return 21;
break;
case 27:return 60;
break;
case 28:return 61;
break;
case 29:return 51;
break;
case 30:return 59;
break;
case 31:return 50;
break;
case 32:return 'INCLUDES';
break;
case 33:return 'DASHMATCH';
break;
case 34:return 'ASSIGN';
break;
case 35:return 47;
break;
case 36:return 48;
break;
case 37:return 7;
break;
case 38:return 72;
break;
case 39:return 'NL';
break;
case 40:return 'DELIM';
break;
}
},
rules: [/^(?:([ \t\r\n\f]*)\/\*([^*]*(\*[^/])*[^*]*)*\*\/([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\/\/[^\n]*([ \t\r\n\f]*))/i,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*')))/i,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*\\?)|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*\\?)))/i,/^(?:([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*)\()/i,/^(?:([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*)([ \t]*):([ \t]*))/i,/^(?:([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*))/i,/^(?:\$([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*)([ \t]*):)/i,/^(?:\$([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*))/i,/^(?:@([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*))/i,/^(?:\{\$([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*)\})/i,/^(?:#[a-f0-9]{3,6})/i,/^(?:#(([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))+))/i,/^(?:(([0-9])*\.([0-9])+|([0-9])+)%)/i,/^(?:(([0-9])*\.([0-9])+|([0-9])+)([-]?([_a-z]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))([_a-z0-9-]|([^\0-\237])|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*))/i,/^(?:(([0-9])*\.([0-9])+|([0-9])+))/i,/^(?:u\\\+[0-9a-f?]{1,6}([0-9a-f]{1,6})?)/i,/^(?:\.)/i,/^(?:([ \t\r\n\f]*):([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*);([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\{([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\}([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\(([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\)([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\[([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\]([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*),([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\/([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)-([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\+([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)\*([ \t\r\n\f]*))/i,/^(?:([ \t\r\n\f]*)>([ \t\r\n\f]*))/i,/^(?:~=)/i,/^(?:\|=)/i,/^(?:([ \t\r\n\f]*)=([ \t\r\n\f]*))/i,/^(?::before\b)/i,/^(?::after\b)/i,/^(?:([ \t\r\n\f]*)$)/i,/^(?:([ \t\r\n\f]*))/i,/^(?:(\n|\r\n|\r|\f)+)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}